import os, json
from socket import SIO_KEEPALIVE_VALS
import numpy as np


import h5py

class DictHoler(dict):

    def __init__(self, new_dict: dict, saved_filename: str = "emulator_params.json"):

        self.saved_filename = saved_filename
        self.update(new_dict)

    def __add__(self, other):
        """
        Combine two JSON files for multi emulator input params
        """
        if os.path.exists(self.saved_filename):
            os.remove(self.saved_filename)

        # make sure the final size
        parameter_names = self["parameter_names"]
        assert np.all(parameter_names == other["parameter_names"])
        self_size = len(self[parameter_names[0]])
        other_size = len(other[parameter_names[0]])
        assert other_size == len(other[parameter_names[-1]])

        # make sure box and npart are the same
        assert self["box"] == other["box"]
        assert self["npart"] == other["npart"]

        new_dict = {}

        with open(self.saved_filename, "w") as f:
            # [bounds, parameter_names] should have the same length
            new_dict["parameter_names"] = self["parameter_names"]
            assert np.all( np.abs(np.array(self["bounds"]) - np.array(other["bounds"])) < 1e-3 )
            new_dict["bounds"] = self["bounds"]

            # [each param]
            # append Latin Hypercube parameters; not Latin hypercube anymore
            for param in parameter_names:
                val = self[param] + other[param]
                assert len(val) == (self_size + other_size)
                new_dict["param"] = val

            new_dict["box"] = self["box"]
            new_dict["npart"] = self["npart"]

            json.dump(new_dict, self.saved_filename)

        return DictHoler(new_dict, saved_filename=self.saved_filename)

class HDF5Holder(h5py.File):
    """
    Hold the h5 file generated by SimulationRunner.multi_sims.MultiPowerSpes,
    and add some class manipulation methods for it.
    """

    def __init__(self, name: str, mode: str = "r", saved_filename: str = "cc_emulator_powerspecs.hdf5"):
        super().__init__(name, mode=mode)

        # a temp file saved in the root
        self.saved_filename = saved_filename
        self._mode = mode

    def __add__(self, other):
        """
        combine two HDF5 files for multi power spectra
        """
        if os.path.exists(self.saved_filename):
            os.remove(self.saved_filename)

        # make sure the final size
        parameter_names = self["parameter_names"][()]
        assert np.all(parameter_names == other["parameter_names"][()])
        self_size = self[parameter_names[0]].shape[0]
        other_size = other[parameter_names[0]].shape[0]
        assert other_size == other[parameter_names[-1]].shape[0]

        # it is safer to create another file than modifying the original file
        with h5py.File(self.saved_filename, "w") as new:
            # [bounds, parameter_names] should have the same length
            new.create_dataset("parameter_names", data=parameter_names)
            assert np.all(self["bounds"][()] == other["bounds"][()])
            new.create_dataset("bounds", data=self["bounds"][()])

            # [each param]
            # append Latin Hypercube parameters; not Latin hypercube anymore
            for param in parameter_names:
                val = np.append(self[param][()], other[param][()])
                assert len(self[param][()].shape) == 1
                assert val.shape[0] == (self_size + other_size)
                new.create_dataset(param, data=val)
            # [append the whole params]
            new_params = np.concatenate([self["params"][()], other["params"][()]], axis=0)
            new.create_dataset("params", data=new_params)

            # [kf modes] they should be the same
            assert np.all(self["kfmpc"][()] == other["kfmpc"][()])
            new.create_dataset("kfmpc", data=self["kfmpc"][()])
            # [modes] number of counts in the kfmpcs per spectrum
            new_modes = np.concatenate([self["modes"][()], other["modes"][()]], axis=0)
            new.create_dataset("modes", data=new_modes)

            # [zout, redshifts]
            assert np.all(np.abs(self["zout"][()] - other["zout"][()]) < 1e-5)
            new.create_dataset("zout", data=self["zout"][()])
            # [scale factors]
            assert np.all(np.abs(self["scale_factors"][()] - other["scale_factors"][()]) < 1e-5)
            new.create_dataset("scale_factors", data=self["scale_factors"][()])

            # [powerspecs]
            new_powerspecs = np.concatenate([self["powerspecs"][()], other["powerspecs"][()]], axis=0)
            new.create_dataset("powerspecs", data=new_powerspecs)


        return HDF5Holder(self.saved_filename, mode=self._mode)
